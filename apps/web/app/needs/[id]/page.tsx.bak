"use client";
import { useEffect, useState } from "react";
import { useAuth } from "@/context/AuthContext";

export default function NeedDetailsPage({ params }: { params: { id: string } }) {
  const { id } = params;
  const { user, isReady } = useAuth();
  const [need, setNeed] = useState<any>(null);
  const [offers, setOffers] = useState<any[]>([]);

  const isClient = user?.role === "client";
  const isExpert = user?.role === "expert";

  useEffect(() => {
    if (!isReady) {
      return;
    }

    fetch(`http://localhost:3001/needs`)
      .then((res) => res.json())
      .then((data) => {
        const n = data.find((d: any) => d.id === id);
        setNeed(n);
      })
      .catch(console.error);

    const token = typeof window !== "undefined" ? localStorage.getItem("token") : null;
    fetch(`http://localhost:3001/offers/${id}`, {
      headers: token
        ? {
            Authorization: `Bearer ${token}`,
          }
        : undefined,
    })
      .then((res) => res.json())
      .then((data) => {
        if (!Array.isArray(data)) {
          setOffers([]);
          return;
        }
        if (user?.role === "expert" && user?.id) {
          setOffers(data.filter((offer) => offer?.expert?.id !== user.id));
        } else {
          setOffers(data);
        }
      })
      .catch(console.error);
  }, [id, isReady, user?.id, user?.role]);

  async function submitOffer(e: React.FormEvent) {
    e.preventDefault();
    const form = new FormData(e.currentTarget as HTMLFormElement);

    const token = typeof window !== "undefined" ? localStorage.getItem("token") : null;
    if (!token) {
      alert("You must be logged in to send an offer.");
      return;
    }

    const rawAmount = form.get("price");
    const amount = rawAmount ? Number(rawAmount) : 0;
    if (!amount || Number.isNaN(amount) || amount <= 0) {
      alert("Please provide a valid offer amount above 0.");
      return;
    }

    const providerName = String(form.get("providerName") ?? "").trim();
    const message = String(form.get("message") ?? "").trim();

    if (!message) {
      alert("Message is required.");
      return;
    }

    const currency = String(form.get("currency") ?? "USD");

    const payload = {
      needId: id,
      amount,
      message: providerName ? `${providerName}: ${message}` : message,
      currency,
    };
    const res = await fetch("http://localhost:3001/offers", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${token}`,
      },
      body: JSON.stringify(payload),
    });
    if (res.ok) {
      alert("Offer sent!");
      const newOffer = await res.json();
      setOffers([{ providerName, ...newOffer }, ...offers]);
      (e.target as HTMLFormElement).reset();
    } else alert("Failed to send offer");
  }

  if (!need) return <p>Loading...</p>;

  const handleOfferAction = async (offerId: string, status: string) => {
  try {
    const token = typeof window !== "undefined" ? localStorage.getItem("token") : null;
    if (!token) {
      alert("You must be logged in to update offers.");
      return;
    }

    const res = await fetch(`http://localhost:3001/offers/${offerId}`, {
      method: "PATCH",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${token}`,
      },
      body: JSON.stringify({ status }),
    });

    if (!res.ok) throw new Error("Failed to update offer");
    alert(`Offer ${status.toLowerCase()} successfully!`);
  } catch (err) {
    console.error(err);
    alert("Failed to update offer.");
  }
};


  return (
    <div className="max-w-3xl mx-auto space-y-6 py-8">
      <h1 className="text-3xl font-bold">{need.title}</h1>
      <p>{need.description}</p>
      {need.budgetAmount && (
        <p>
          <b>Budget:</b> {need.budgetAmount} {need.budgetCurrency}
        </p>
      )}

      <hr />

      <h2 className="text-xl font-semibold">Offers</h2>
      {offers.length === 0 ? (
        <p>No offers yet.</p>
      ) : (
        <ul className="space-y-2">
          {offers.map((o) => (
            <li key={o.id} className="border rounded-md p-3">
  <p className="font-semibold">{o.providerName}</p>
  <p>{o.message}</p>
  {o.price && (
    <p>
      Offer: {o.price} {o.currency}
    </p>
  )}
  <p className="text-xs text-gray-400">
    {new Date(o.createdAt).toLocaleString()}
  </p>

  {isClient ? (
    <div className="flex gap-2 mt-2">
      <button
        onClick={() => handleOfferAction(o.id, "ACCEPTED")}
        className="bg-green-600 text-white px-3 py-1 rounded-md hover:bg-green-700"
      >
        Accept
      </button>
      <button
        onClick={() => handleOfferAction(o.id, "DECLINED")}
        className="bg-red-600 text-white px-3 py-1 rounded-md hover:bg-red-700"
      >
        Decline
      </button>
    </div>
  ) : null}
</li>

          ))}
        </ul>
      )}

      <hr />

      {isExpert ? (
        <>
          <h2 className="text-xl font-semibold">Submit an Offer</h2>
          <form onSubmit={submitOffer} className="space-y-3">
            <input
              name="providerName"
              placeholder="Your name"
              className="border rounded-md p-2 w-full"
              required
            />
            <textarea
              name="message"
              placeholder="Your message"
              className="border rounded-md p-2 w-full"
              required
            />
            <input
              name="price"
              type="number"
              placeholder="Price"
              className="border rounded-md p-2 w-full"
            />
            <select name="currency" className="border rounded-md p-2 w-full">
              <option>USD</option>
              <option>EUR</option>
              <option>GBP</option>
            </select>
            <button
              type="submit"
              className="bg-blue-600 text-white px-4 py-2 rounded-md"
            >
              Submit Offer
            </button>
          </form>
        </>
      ) : null}
    </div>
  );
}
