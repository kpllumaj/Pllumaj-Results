"use client";

import Link from "next/link";
import { FormEvent, useCallback, useEffect, useMemo, useState } from "react";
import { useAuthRedirect } from "@/hooks/useAuthRedirect";
import { useAuth } from "@/context/AuthContext";
import { useChannel } from "@/hooks/useChannel";

type Need = {
  id: string;
  title: string;
  description: string;
  budgetAmount: number | null;
  budgetCurrency: string;
  createdAt: string;
  client?: { email?: string | null } | null;
};

const API_BASE = process.env.NEXT_PUBLIC_API_URL ?? "http://localhost:3001";

export default function FeedPage() {
  const checkingAuth = useAuthRedirect();
  const { user } = useAuth();
  const [needs, setNeeds] = useState<Need[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [activeNeedId, setActiveNeedId] = useState<string | null>(null);
  const [offerAmount, setOfferAmount] = useState("");
  const [offerMessage, setOfferMessage] = useState("");
  const [offerSubmitting, setOfferSubmitting] = useState(false);
  const [offerError, setOfferError] = useState<string | null>(null);
  const [offerCurrency, setOfferCurrency] = useState("USD");
  const [toastMessage, setToastMessage] = useState<{
    message: string;
    tone: "success" | "error";
  } | null>(null);
  const [modalEventAcknowledged, setModalEventAcknowledged] = useState(false);

  const isExpert = user?.role === "expert";

  const activeNeed = useMemo(
    () => needs.find((need) => need.id === activeNeedId) ?? null,
    [needs, activeNeedId],
  );

  const fetchNeeds = useCallback(async () => {
    try {
      setLoading(true);
      setError(null);

      const res = await fetch(`${API_BASE}/needs`);
      if (!res.ok) {
        throw new Error(`Failed to load needs (${res.status})`);
      }

      const data = await res.json();
      const sorted = Array.isArray(data)
        ? [...data].sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime())
        : [];

      setNeeds(sorted);
    } catch (err) {
      console.error(err);
      setError(err instanceof Error ? err.message : "Unable to load feed. Please try again later.");
    } finally {
      setLoading(false);
    }
  }, []);

  useEffect(() => {
    if (checkingAuth) {
      return;
    }
    fetchNeeds();
  }, [checkingAuth, fetchNeeds]);

  useEffect(() => {
    if (!toastMessage) {
      return;
    }
    const timeout = setTimeout(() => setToastMessage(null), 3200);
    return () => clearTimeout(timeout);
  }, [toastMessage]);

  const activeNeedChannel = useMemo(
    () => (activeNeedId ? `need-${activeNeedId}` : null),
    [activeNeedId],
  );

  const modalChannelHandlers = useMemo<Record<string, any>>(() => {
    if (!activeNeed || !activeNeedId) {
      return {};
    }

    return {
      "offer:created": (payload: any) => {
        if (!activeNeed || modalEventAcknowledged) {
          return;
        }

        const offer = payload as { expertId?: string };

        if (offer?.expertId && offer.expertId === user?.id) {
          setModalEventAcknowledged(true);
          setToastMessage({ message: "Offer confirmed in real time!", tone: "success" });
        }
      },
      "offer:updated": (_payload: any) => {
        // Intentionally left blank for future enhancements.
      },
    };
  }, [activeNeed, activeNeedId, modalEventAcknowledged, user?.id]);

  useChannel(activeNeedChannel, modalChannelHandlers);

  if (checkingAuth) {
    return <main className="flex min-h-screen items-center justify-center text-gray-500">Checking access...</main>;
  }

  function openOfferModal(need: Need) {
    setActiveNeedId(need.id);
    setModalEventAcknowledged(false);
    setOfferAmount("");
    setOfferMessage("");
    setOfferCurrency("USD");
    setOfferError(null);
  }

  function closeOfferModal() {
    setActiveNeedId(null);
    setOfferAmount("");
    setOfferMessage("");
    setOfferCurrency("USD");
    setOfferError(null);
    setModalEventAcknowledged(false);
  }

  async function handleOfferSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault();
    if (!activeNeed) {
      return;
    }

    const parsedAmount = Number.parseFloat(offerAmount);
    if (Number.isNaN(parsedAmount) || !Number.isFinite(parsedAmount) || parsedAmount <= 0) {
      setOfferError("Please enter a valid offer amount above 0.");
      return;
    }

    const trimmedMessage = offerMessage.trim();
    if (trimmedMessage.length === 0 || trimmedMessage.length > 500) {
      setOfferError("Message must be between 1 and 500 characters.");
      return;
    }

    const token = typeof window !== "undefined" ? localStorage.getItem("token") : null;
    if (!token) {
      setOfferError("You must be logged in to send an offer.");
      return;
    }

    try {
      console.log("Submitting offer for", activeNeed.id);
      setOfferSubmitting(true);
      setOfferError(null);

      const response = await fetch(`${API_BASE}/offers`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify({
          needId: activeNeed.id,
          amount: parsedAmount,
          message: trimmedMessage,
          currency: offerCurrency || "USD",
        }),
      });

      if (!response.ok) {
        console.error(`Offer request failed with status ${response.status}`, response.statusText);
        const contentType = response.headers.get("content-type");
        let message = "Failed to send offer. Please try again.";
        if (contentType?.includes("application/json")) {
          const body = await response.json();
          if (body?.error) {
            message = body.error;
          }
        } else {
          const text = await response.text();
          if (text) {
            message = text;
          }
        }
        throw new Error(message);
      }

      alert("Offer sent successfully!");
      setToastMessage({ message: "Offer sent!", tone: "success" });
      closeOfferModal();
      await fetchNeeds();
    } catch (err) {
      console.error("Failed to send offer", err);
      setOfferError(err instanceof Error ? err.message : "Failed to send offer. Please try again.");
      setToastMessage({ message: "Failed to send offer", tone: "error" });
      alert("Failed to send offer");
    } finally {
      setOfferSubmitting(false);
    }
  }

  return (
    <main className="mx-auto w-full max-w-6xl px-4 py-14">
      <header className="mb-12 text-center">
        <h1 className="text-4xl font-bold text-gray-900">Public Needs Feed</h1>
        <p className="mt-3 text-base text-gray-600">
          Real-time requests from clients in Pllumaj Results.
        </p>
      </header>

      {loading ? (
        <p className="text-center text-gray-500">Loading feed...</p>
      ) : error ? (
        <p className="text-center text-red-500">{error}</p>
      ) : needs.length === 0 ? (
        <p className="text-center text-gray-500">No needs have been posted yet.</p>
      ) : (
        <ul className="grid gap-6 sm:grid-cols-2 xl:grid-cols-3">
          {needs.map((need) => (
            <li
              key={need.id}
              className="flex h-full flex-col rounded-3xl bg-white p-6 shadow-lg ring-1 ring-black/5 transition ease-out hover:-translate-y-1 hover:shadow-xl"
            >
              <div className="flex-grow space-y-4">
                <div className="flex items-start justify-between gap-3">
                  <h2 className="text-2xl font-semibold text-gray-900">{need.title}</h2>
                  <span className="rounded-full bg-emerald-100 px-3 py-1 text-xs font-semibold uppercase tracking-wide text-emerald-700">
                    {need.budgetAmount != null
                      ? `${need.budgetCurrency || "USD"} ${Number(need.budgetAmount).toFixed(2)}`
                      : "Budget TBD"}
                  </span>
                </div>
                <p className="leading-relaxed text-gray-700">{need.description}</p>
              </div>

              <div className="mt-6 flex items-center justify-between gap-4 text-sm text-gray-500">
                <div>
                  <p>Posted {new Date(need.createdAt).toLocaleString()}</p>
                  <p className="mt-1 text-xs text-gray-400">
                    Client: {need.client?.email ?? "Hidden"}
                  </p>
                </div>
                <div className="flex flex-col items-end gap-2">
                  <Link
                    href={`/needs/${need.id}`}
                    className="rounded-lg bg-blue-600 px-4 py-2 text-sm font-semibold text-white transition hover:bg-blue-700"
                  >
                    View Details
                  </Link>
                  {isExpert ? (
                    <button
                      type="button"
                      onClick={() => openOfferModal(need)}
                      className="w-full rounded-lg bg-emerald-600 px-4 py-2 text-sm font-semibold text-white transition hover:bg-emerald-700"
                    >
                      Send Offer
                    </button>
                  ) : null}
                </div>
              </div>
            </li>
          ))}
        </ul>
      )}

      {toastMessage ? (
        <div
          className={`fixed right-4 top-24 z-50 rounded-lg px-4 py-3 text-sm font-semibold text-white shadow-lg ${
            toastMessage.tone === "success" ? "bg-emerald-600" : "bg-red-600"
          }`}
          role="status"
          aria-live="polite"
        >
          {toastMessage.message}
        </div>
      ) : null}

      {activeNeed ? (
        <div
          className="fixed inset-0 z-40 flex items-center justify-center px-4"
          style={{ backgroundColor: "rgba(0, 0, 0, 0.55)" }}
        >
          <div
            className="w-full max-w-md p-6 shadow-2xl"
            style={{ backgroundColor: "#ffffff", borderRadius: "16px" }}
          >
            <div className="mb-4 flex items-start justify-between gap-3">
              <div>
                <h2 className="text-xl font-semibold text-gray-900">Send Offer</h2>
                <p className="text-sm text-gray-500">
                  Respond to &ldquo;{activeNeed.title}&rdquo;
                </p>
              </div>
              <button
                type="button"
                onClick={closeOfferModal}
                className="rounded-full bg-gray-100 p-2 text-gray-500 transition hover:bg-gray-200 hover:text-gray-700"
                aria-label="Close offer modal"
              >
                Close
              </button>
            </div>

            <form className="space-y-4" onSubmit={handleOfferSubmit}>
              <label className="block text-sm font-medium text-gray-700">
                Offer Amount
                <input
                  type="number"
                  min="0"
                  step="0.01"
                  value={offerAmount}
                  onChange={(event) => setOfferAmount(event.target.value)}
                  className="mt-1 w-full rounded-lg border border-gray-300 p-2"
                  placeholder="e.g. 150"
                  required
                />
              </label>

              <label className="block text-sm font-medium text-gray-700">
                Message to Client
                <textarea
                  value={offerMessage}
                  onChange={(event) => setOfferMessage(event.target.value)}
                  className="mt-1 h-28 w-full rounded-lg border border-gray-300 p-2"
                  placeholder="Share how you can help and any relevant details"
                  required
                  maxLength={500}
                />
              </label>

              {offerError ? <p className="text-sm text-red-600">{offerError}</p> : null}

              <label className="block text-sm font-medium text-gray-700">
                Currency
                <select
                  value={offerCurrency}
                  onChange={(event) => setOfferCurrency(event.target.value)}
                  className="mt-1 w-full rounded-lg border border-gray-300 p-2"
                >
                  <option value="USD">USD</option>
                  <option value="EUR">EUR</option>
                  <option value="GBP">GBP</option>
                </select>
              </label>

              <div className="flex items-center justify-end gap-2">
                <button
                  type="button"
                  onClick={closeOfferModal}
                  className="rounded-lg px-4 py-2 text-sm font-semibold text-gray-600 transition hover:bg-gray-100"
                  style={{ minWidth: "120px" }}
                  disabled={offerSubmitting}
                >
                  Cancel
                </button>
                <button
                  type="submit"
                  disabled={offerSubmitting}
                  className="rounded-lg bg-emerald-600 px-4 py-2 text-sm font-semibold text-white transition hover:bg-emerald-700 disabled:cursor-not-allowed disabled:bg-emerald-400"
                  style={{ minWidth: "140px" }}
                >
                  {offerSubmitting ? "Sending..." : "Submit Offer"}
                </button>
              </div>
            </form>
          </div>
        </div>
      ) : null}
    </main>
  );
}
