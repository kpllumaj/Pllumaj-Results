// Prisma schema for Pllumaj Results core entities.
// PostGIS extension can be enabled later for richer geospatial queries.

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  CLIENT
  EXPERT
  BUSINESS
  WORKER
  ADMIN
}

enum NeedStatus {
  DRAFT
  POSTED
  MATCHED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum OfferStatus {
  PENDING  @map("pending")
  ACCEPTED @map("accepted")
  DECLINED @map("declined")
  EXPIRED  @map("expired")
}

enum OrderStatus {
  INITIATED
  AWAITING_PAYMENT
  IN_FULFILLMENT
  FULFILLED
  CANCELLED
  DISPUTED
}

enum PaymentStatus {
  PENDING
  SUCCEEDED
  FAILED
  REFUNDED
}

enum DisputeStatus {
  OPEN
  UNDER_REVIEW
  RESOLVED
  REVERSED
}

model City {
  id        String  @id @default(cuid())
  name      String
  state     String?
  country   String
  timezone  String
  latitude  Float
  longitude Float

  businesses Business[]
  needs      Need[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([country, name])
}

model Category {
  id       String     @id @default(cuid())
  name     String
  slug     String     @unique
  parentId String?
  parent   Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children Category[] @relation("CategoryHierarchy")

  inventoryItems InventoryItem[]
  needs          Need[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id            String     @id @default(cuid())
  email         String     @unique
  password      String
  role          String
  clerkId       String?    @unique
  phone         String?
  profile       Profile?
  businesses    Business[] @relation("BusinessOwners")
  needs         Need[]     @relation("NeedClients")
  offers        Offer[]
  reviews       Review[]   @relation("ReviewAuthors")
  disputesFiled Dispute[]  @relation("DisputeOpeners")
  clientOrders  Order[]    @relation("ClientOrders")

  sentMessages Message[] @relation("UserMessages")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Profile {
  id        String  @id @default(cuid())
  userId    String  @unique
  user      User    @relation(fields: [userId], references: [id])
  firstName String?
  lastName  String?
  avatarUrl String?
  bio       String?
  rating    Float?  @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Business {
  id           String  @id @default(cuid())
  ownerId      String
  owner        User    @relation("BusinessOwners", fields: [ownerId], references: [id])
  name         String
  description  String?
  cityId       String
  city         City    @relation(fields: [cityId], references: [id])
  verified     Boolean @default(false)
  website      String?
  supportEmail String?
  supportPhone String?
  locationLat  Float?
  locationLng  Float?

  inventoryItems InventoryItem[]
  offers         Offer[]
  matches        Match[]
  orders         Order[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([cityId])
  @@index([verified])
}

model InventoryItem {
  id          String   @id @default(cuid())
  businessId  String
  business    Business @relation(fields: [businessId], references: [id])
  categoryId  String
  category    Category @relation(fields: [categoryId], references: [id])
  title       String
  description String?
  price       Decimal  @db.Decimal(12, 2)
  currency    String   @default("USD")
  available   Boolean  @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([businessId])
  @@index([categoryId])
}

model Need {
  id             String     @id @default(cuid())
  clientId       String
  client         User       @relation("NeedClients", fields: [clientId], references: [id])
  title          String
  description    String
  categoryId     String
  category       Category   @relation(fields: [categoryId], references: [id])
  cityId         String
  city           City       @relation(fields: [cityId], references: [id])
  budgetAmount   Decimal?   @db.Decimal(12, 2)
  budgetCurrency String     @default("USD")
  status         NeedStatus @default(DRAFT)
  locationLat    Float?
  locationLng    Float?
  timeEarliest   DateTime
  timeLatest     DateTime?

  offers  Offer[]
  matches Match[]
  order   Order?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([cityId])
  @@index([categoryId])
  @@index([status])
}

model Offer {
  id        String   @id @default(cuid())
  amount    Float
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  status    OfferStatus @default(PENDING)

  expert   User @relation(fields: [expertId], references: [id])
  expertId String

  need   Need @relation(fields: [needId], references: [id])
  needId String

  business   Business? @relation(fields: [businessId], references: [id])
  businessId String?

  order Order? @relation("OrderOffer")

  @@index([needId])
  @@index([expertId])
  @@index([businessId])
}

model Match {
  id          String   @id @default(cuid())
  needId      String
  need        Need     @relation(fields: [needId], references: [id])
  businessId  String
  business    Business @relation(fields: [businessId], references: [id])
  score       Float
  distance    Float?
  priceScore  Float?
  ratingScore Float?
  etaScore    Float?

  createdAt DateTime @default(now())

  @@unique([needId, businessId])
  @@index([needId])
  @@index([businessId])
}

model Order {
  id String @id @default(cuid())

  needId String @unique
  need   Need   @relation(fields: [needId], references: [id])

  offerId String @unique
  offer   Offer  @relation("OrderOffer", fields: [offerId], references: [id])

  clientId String
  client   User   @relation("ClientOrders", fields: [clientId], references: [id])

  providerBusinessId String?
  providerBusiness   Business? @relation(fields: [providerBusinessId], references: [id])

  status      OrderStatus @default(INITIATED)
  scheduledAt DateTime?

  payment Payment?
  review  Review?
  dispute Dispute?

  messages Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([clientId])
  @@index([providerBusinessId])
}


model Payment {
  id                    String        @id @default(cuid())
  orderId               String        @unique
  order                 Order         @relation(fields: [orderId], references: [id])
  amount                Decimal       @db.Decimal(12, 2)
  currency              String        @default("USD")
  status                PaymentStatus @default(PENDING)
  stripePaymentIntentId String?       @unique
  stripeChargeId        String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Review {
  id          String  @id @default(cuid())
  orderId     String  @unique
  order       Order   @relation(fields: [orderId], references: [id])
  rating      Int
  comment     String?
  createdById String
  createdBy   User    @relation("ReviewAuthors", fields: [createdById], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Dispute {
  id         String        @id @default(cuid())
  orderId    String        @unique
  order      Order         @relation(fields: [orderId], references: [id])
  openedById String
  openedBy   User          @relation("DisputeOpeners", fields: [openedById], references: [id])
  status     DisputeStatus @default(OPEN)
  reason     String
  resolution String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Message {
  id        String   @id @default(cuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id])
  senderId  String
  sender    User     @relation("UserMessages", fields: [senderId], references: [id])
  text      String
  createdAt DateTime @default(now())

  @@index([orderId])
  @@index([senderId])
}
